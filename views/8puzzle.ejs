<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>8 Puzzle</title>
		<style>
			body {
				font-family: "Helvetica";
			}

			.game_title {
				text-align: center;
			}

			#game_area {
				height: 306px;
				width: 306px;
				margin: 0 auto;
				display: flex;
				flex-direction: row;
				flex-wrap: wrap;
				border: 2px solid black;
			}

			.number-block {
				height: 100px;
				width: 100px;
				border: 1px solid black;
				text-align: center;
				font-size: 78px;
				cursor: pointer;
			}

			.void_class {
				background: black;
				color: grey;
				cursor: not-allowed;
			}

			#game_controls {
				height: 100px;
				width: 300px;
				margin: 20px auto 0 auto;
				text-align: center;
			}

			.reset_btn {
				height: 30px;
				width: 100px;
				background-color: white;
				border: 1px solid black;
				cursor: pointer;
			}

			.reset_btn.focus,
			.reset_btn:focus {
				outline: 0;
				box-shadow: none !important;
			}

			#moves {
				text-align: center;
				margin: 5px;
			}
		</style>
	</head>
	<body>
		<h1 class="game_title">8 Puzzle Game</h1>
		<div id="game_area"></div>
		<div id="moves">Moves : 0</div>
		<div id="game_controls"></div>
	</body>
	<script src="./8puzzle-AI-Solver.js"></script>
	<script>
		function shuffle(array) {
			let currentIndex = array.length,
				randomIndex;

			while (currentIndex != 0) {
				randomIndex = Math.floor(Math.random() * currentIndex);
				currentIndex--;
				[array[currentIndex], array[randomIndex]] = [
					array[randomIndex],
					array[currentIndex],
				];
			}

			return array;
		}

		let numberArr = [1, 2, 3, 4, 5, 6, 0, 7, 8];
		// let numberArr = [1, 2, 3, 4, 5, 6, 7, 8, 0];
		let finalState = "[1,2,3,4,5,6,7,8,0]";
		var AI_moves = 0;

		let checkGameState = (arr) => {
			debugger;
			if (JSON.stringify(arr) === finalState) {
				var points = 0;
				if (movesTaken <= AI_moves) {
					points = 100;
				} else {
					points = (AI_moves / movesTaken) * 100;
				}
				alert(
					`Wohooo!! You completed the game\nPoints Earned : ${points}`,
				);
				reset();
			}
		};

		// let checkGameState = (arr) => {
		//   if (JSON.stringify(arr) === finalState) {
		//     alert("you Won");
		//     reset();
		//   }
		// };

		let checkInversion = (arr) => {
			let invCount = 0;
			for (let i = 0; i < arr.length; i++) {
				for (let j = i + 1; j < arr.length; j++) {
					if (arr[j] && arr[i] && arr[i] > arr[j]) {
						invCount++;
					}
				}
			}
			return invCount;
		};

		let isSolvable = (numberArr) => {
			let inversions = checkInversion(numberArr);
			if (inversions % 2 == 0) {
				return true;
			}
			return false;
		};

		let getRandomIntBetweenRange = (min, max) => {
			return Math.floor(Math.random(min, max) * (max - min + 1) + min);
		};

		while (true) {
			//   shuffle(numberArr);
			if (JSON.stringify(numberArr) != finalState) {
				if (!isSolvable(numberArr)) continue;
				else {
					AI_moves = solve8puzzle(numberArr);
					break;
				}
			}
		}

		let gameArea = document.getElementById("game_area");
		let gameControls = document.getElementById("game_controls");
		let gameWinState = false;
		let movesTaken = 0;

		let renderUi = function (flag) {
			let initialRender = flag;
			debugger;
			if (initialRender) {
				elementFactory();
			} else {
				repaint();
			}
		};

		let reset = () => {
			debugger;
			movesTaken = 0;
			var mv = document.getElementById("moves");
			mv.textContent = `Moves : ${movesTaken}`;
			let preGameShuffle = shuffle(numberArr);
			let isGameSolvable = isSolvable(preGameShuffle);
			if (isGameSolvable) {
				numberArr = preGameShuffle;
				gameWinState = false;
				renderUi(false);
				// console.log("AI");
				AI_moves = solve8puzzle(numberArr);
			} else {
				reset();
			}
		};

		// let reset = () => {
		//   debugger;
		//   let preGameShuffle = shuffle(numberArr);
		//   let isGameSolvable = isSolvable(preGameShuffle);
		//   if (isGameSolvable) {
		//     numberArr = preGameShuffle;
		//   } else {
		//     reset();
		//   }
		//   gameWinState = false;
		//   renderUi(false);
		// };

		let elementFactory = function () {
			//   debugger;
			let resetButton = document.createElement("button");
			gameControls.appendChild(resetButton);
			resetButton.classList.add("reset_btn");
			resetButton.innerText = "RESET";
			resetButton.addEventListener("click", reset);
			for (var i = 0; i < 9; i++) {
				let number_div = document.createElement("div");
				gameArea.appendChild(number_div);
				number_div.classList.add("number-block");
				number_div.setAttribute("data-number", numberArr[i]);
				number_div.setAttribute("data-index", i);
				number_div.innerText = number_div.getAttribute("data-number");
				number_div.classList.add("number_class");
				number_div.addEventListener("click", evaluate);
				if (numberArr[i] === 0) {
					number_div.classList.add("void_class");
				}
			}
		};

		let repaint = () => {
			debugger;
			willRepaintGame
				.then(function () {
					let numberBlocks =
						document.getElementsByClassName("number-block");
					for (let key in numberBlocks) {
						if (typeof numberBlocks[key] === "object") {
							numberBlocks[key].setAttribute(
								"data-number",
								numberArr[key],
							);
							numberBlocks[key].innerText =
								numberBlocks[key].getAttribute("data-number");
							if (
								numberBlocks[key].classList.contains(
									"void_class",
								)
							) {
								numberBlocks[key].classList.remove(
									"void_class",
								);
							} else if (numberArr[key] === 0) {
								numberBlocks[key].classList.add("void_class");
							}
						}
					}
				})
				.then(function () {
					setTimeout(function () {
						checkGameState(numberArr);
					}, 100);
				});
		};

		let willRepaintGame = new Promise((resolve, reject) => {
			resolve(); // resolve regardless;
		});

		let swapFunction = function (temp, arr, i, j) {
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			temp = null;
			movesTaken++;
			var mv = document.getElementById("moves");
			mv.textContent = `Moves : ${movesTaken}`;
			return temp, arr;
		};

		let evaluate = function (e) {
			let currNumClicked = parseInt(e.target.dataset.number);
			if (currNumClicked === 0) return false;
			let temp;
			let numberState = numberArr;
			let indexOfNumber = numberState.indexOf(currNumClicked);
			let voidCases = [2, 3, 5, 6];
			let targetElementIndex = parseInt(e.target.dataset.index);

			if (voidCases.indexOf(targetElementIndex) >= 0) {
				if (targetElementIndex === 2 || targetElementIndex === 5) {
					if (numberState[indexOfNumber + 1] === 0) return false;
				} else if (
					targetElementIndex === 3 ||
					targetElementIndex === 6
				) {
					if (numberState[indexOfNumber - 1] === 0) return false;
				}
			}

			//if the number clicked is at index 0
			if (indexOfNumber === 0) {
				if (numberState[1] === 0) {
					temp, (numberState = swapFunction(temp, numberState, 1, 0));
				} else if (numberState[3] === 0) {
					temp = numberState[3];
					numberState[3] = numberState[0];
					numberState[0] = temp;
					temp = null;
				}
			}

			//if the number clicked is at index 1 to 7

			if (indexOfNumber >= 1 && indexOfNumber <= 8) {
				//check for 0
				if (numberState[indexOfNumber - 1] === 0) {
					temp,
						(numberState = swapFunction(
							temp,
							numberState,
							indexOfNumber - 1,
							indexOfNumber,
						));
				} else if (numberState[indexOfNumber + 1] === 0) {
					temp,
						(numberState = swapFunction(
							temp,
							numberState,
							indexOfNumber + 1,
							indexOfNumber,
						));
				} else if (numberState[indexOfNumber + 3] === 0) {
					temp,
						(numberState = swapFunction(
							temp,
							numberState,
							indexOfNumber + 3,
							indexOfNumber,
						));
				} else if (numberState[indexOfNumber - 3] === 0) {
					temp,
						(numberState = swapFunction(
							temp,
							numberState,
							indexOfNumber - 3,
							indexOfNumber,
						));
				} else {
					return false;
				}
			}

			numberArr = numberState;
			//check for game State
			renderUi(false);
		};

		/* game start */
		renderUi(true);
	</script>
</html>
