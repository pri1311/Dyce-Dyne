<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<!-- Bootstrap CSS -->
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
			integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l"
			crossorigin="anonymous"
		/>
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"
		/>
		<title>8 Puzzle</title>
		<style>
			body {
				height: 100vh;
				width: 100%;
			}
			.tile1,
			.tile2,
			.tile3,
			.tile4,
			.tile5,
			.tile6,
			.tile7,
			.tile8,
			.tile9 {
				display: table-cell;
				width: 120px;
				height: 120px;
				border: 1px solid white;
				background: url("images/dessert.jpg");
				cursor: pointer;
			}

			.tile1 {
				background-position: left top;
			}
			.tile2 {
				background-position: center top;
			}
			.tile3 {
				background-position: right top;
			}
			.tile4 {
				background-position: left center;
			}
			.tile5 {
				background-position: center center;
			}
			.tile6 {
				background-position: right center;
			}
			.tile7 {
				background-position: left bottom;
			}
			.tile8 {
				background-position: center bottom;
			}
			.tile9 {
				background: white;
				cursor: default;
			}
		</style>
	</head>
	<body>
		<div class="container py-5 mx-auto my-auto align-items-center">
			<div class="row d-flex justify-content-center mx-auto">
				<div
					class="
						col-lg-6 col-md-6 col-sm-12
						mx-auto
						px-0
						justify-content-center
					"
				>
					<div class="mx-auto" id="table" style="display: table">
						<div id="row1" style="display: table-row">
							<div
								id="cell11"
								class="tile1"
								onClick="clickTile(1,1);"
							></div>
							<div
								id="cell12"
								class="tile2"
								onClick="clickTile(1,2);"
							></div>
							<div
								id="cell13"
								class="tile3"
								onClick="clickTile(1,3);"
							></div>
						</div>
						<div id="row2" style="display: table-row">
							<div
								id="cell21"
								class="tile4"
								onClick="clickTile(2,1);"
							></div>
							<div
								id="cell22"
								class="tile5"
								onClick="clickTile(2,2);"
							></div>
							<div
								id="cell23"
								class="tile6"
								onClick="clickTile(2,3);"
							></div>
						</div>
						<div id="row3" style="display: table-row">
							<div
								id="cell31"
								class="tile7"
								onClick="clickTile(3,1);"
							></div>
							<div
								id="cell32"
								class="tile8"
								onClick="clickTile(3,2);"
							></div>
							<div
								id="cell33"
								class="tile9"
								onClick="clickTile(3,3);"
							></div>
						</div>
					</div>
				</div>
				<div
					class="
						col-lg-6 col-md-6 col-sm-12
						justify-content-center
						align-content-center
						px-0
					"
					style="margin: auto"
				>
					<img
						class="
							img-fluid
							align-self-center
							justify-self-center
							align-content-center
						"
						src="images/dessert.jpg"
						alt=""
					/>
				</div>
			</div>
		</div>
		<div class="container">
			<div class="row justify-content-md-center">
				<div class="col col-lg-auto">
					<button onclick="getNewGame()">New Game</button>
				</div>
				<div class="col-md-auto">
					<button id="moves">Moves : 0</button>
				</div>
				<div class="col col-lg-auto">
					<button>How to Play!</button>
				</div>
			</div>
		</div>
	</body>
	<script src="scripts/8puzzle-AI-Solver.js"></script>
	<script>
		var AI_moves = 0;
		var player_moves = 0;
		var boardGlobal = null;
		var somelist = [];
		movesButton = document.getElementById("moves");
		function swapTiles(cell1, cell2) {
			movesButton.innerHTML = "Moves: " + String(player_moves);
			var temp = document.getElementById(cell1).className;
			document.getElementById(cell1).className =
				document.getElementById(cell2).className;
			document.getElementById(cell2).className = temp;
		}
		let checkInversion = (arr) => {
			let invCount = 0;
			for (let i = 0; i < arr.length; i++) {
				for (let j = i + 1; j < arr.length; j++) {
					if (arr[j] && arr[i] && arr[i] > arr[j]) {
						invCount++;
					}
				}
			}
			return invCount;
		};

		let isSolvable = (numberArr) => {
			let inversions = checkInversion(numberArr);
			if (inversions % 2 == 0) {
				return true;
			}
			return false;
		};

		function shuffle(boardArr) {
			//Use nested loops to access each cell of the 3x3 grid
			board = boardArr.slice();

			for (var row = 1; row <= 3; row++) {
				//For each row of the 3x3 grid
				for (var column = 1; column <= 3; column++) {
					//For each column in this row

					var row2 = Math.floor(Math.random() * 3 + 1); //Pick a random row from 1 to 3
					var column2 = Math.floor(Math.random() * 3 + 1); //Pick a random column from 1 to 3
					var a = (row - 1) * 3 + column;
					var b = (row2 - 1) * 3 + column2;

					swapTiles("cell" + row + column, "cell" + row2 + column2); //Swap the look & feel of both cells
					somelist.push([
						[row, column],
						[row2, column2],
					]);

					temp = board[a - 1];
					board[a - 1] = board[b - 1];
					board[b - 1] = temp;
				}
			}
			boardGlobal = board.slice();
			return board;
		}

		function goalTest() {
			console.log(boardGlobal);
			return boardGlobal.toString() === "1,2,3,4,5,6,7,8,9";
		}

		function getNewBoard() {
			player_moves = 0;
			AI_moves = 0;
			movesButton.innerHTML = "Moves: 0";
			board = [1, 2, 3, 4, 5, 6, 7, 8, 9];
			newBoard = shuffle(board);
			while (!isSolvable(newBoard)) {
				newBoard = shuffle(newBoard);
			}

			console.log(newBoard);
			boardGlobal = newBoard.slice();

			// AI_moves = solve8puzzle(newBoard);
			console.log(AI_moves);
			console.log(somelist);
		}

		async function getNewGame() {
			$.when(getNewBoard()).then(async () => {
				console.log(boardGlobal);
				AI_moves = await solve8puzzle(boardGlobal);
				console.log(AI_moves);
			});
		}

		function clickTile(row, column) {
			var cell = document.getElementById("cell" + row + column);
			var tile = cell.className;
			if (tile != "tile9") {
				//Checking if white tile on the right
				if (column < 3) {
					if (
						document.getElementById("cell" + row + (column + 1))
							.className == "tile9"
					) {
						player_moves += 1;
						var a = (row - 1) * 3 + column;
						var b = (row - 1) * 3 + column + 1;

						swapTiles(
							"cell" + row + column,
							"cell" + row + (column + 1),
						);
						temp = boardGlobal[a - 1];
						boardGlobal[a - 1] = boardGlobal[b - 1];
						boardGlobal[b - 1] = temp;

						return;
					}
				}
				//Checking if white tile on the left
				if (column > 1) {
					if (
						document.getElementById("cell" + row + (column - 1))
							.className == "tile9"
					) {
						player_moves += 1;
						var a = (row - 1) * 3 + column;
						var b = (row - 1) * 3 + column - 1;
						swapTiles(
							"cell" + row + column,
							"cell" + row + (column - 1),
						);
						temp = boardGlobal[a - 1];
						boardGlobal[a - 1] = boardGlobal[b - 1];
						boardGlobal[b - 1] = temp;
						return;
					}
				}
				//Checking if white tile is above
				if (row > 1) {
					if (
						document.getElementById("cell" + (row - 1) + column)
							.className == "tile9"
					) {
						player_moves += 1;
						player_moves += 1;
						var a = (row - 1) * 3 + column;
						var b = (row - 2) * 3 + column;
						swapTiles(
							"cell" + row + column,
							"cell" + (row - 1) + column,
						);
						temp = boardGlobal[a - 1];
						boardGlobal[a - 1] = boardGlobal[b - 1];
						boardGlobal[b - 1] = temp;
						return;
					}
				}
				//Checking if white tile is below
				if (row < 3) {
					if (
						document.getElementById("cell" + (row + 1) + column)
							.className == "tile9"
					) {
						player_moves += 1;
						player_moves += 1;
						var a = (row - 1) * 3 + column;
						var b = row * 3 + column;
						swapTiles(
							"cell" + row + column,
							"cell" + (row + 1) + column,
						);
						temp = boardGlobal[a - 1];
						boardGlobal[a - 1] = boardGlobal[b - 1];
						boardGlobal[b - 1] = temp;
						return;
					}
				}
			}
			if (goalTest()) alert("You won the game!");
		}
	</script>
	<script
		src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
		integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
		crossorigin="anonymous"
	></script>
	<script
		src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns"
		crossorigin="anonymous"
	></script>
</html>
